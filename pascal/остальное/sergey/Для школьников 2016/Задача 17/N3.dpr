{ Задана последовательность шестизначных целых положительных чисел, количество
  чисел в последовательности не превышает 100 млн. Вывести набор (наборы) цифр,
  наиболее часто использующиеся при написании чисел последовательности. Все
  цифры такого набора должны входить в написание числа. Например:
               123456 681256 980355 345654 291955 402147 127044
  Здесь наиболее часто встречается набор цифр 0,1,2,4,4,7 - числа, состоящие из
  цифр этого набора, встречаются 2 раза.}

program N3;

{$APPTYPE CONSOLE}

uses SysUtils, DateUtils;

var a: array[0..9,0..9,0..9,0..9,0..9,0..9] of longint;
    b: array[1..6] of byte;   // хранит упорядоченные цифры числа
    bb: array[0..9] of byte;  // дополнительный массив
    x: longint;
    i,j,k,l,m,n: byte;
    f: text;
    t1,t2: TDateTime;
begin
  t1:=Now;
  // заполняем основной массив нулями
  for i:=0 to 9 do
    for j:=0 to 9 do
      for k:=0 to 9 do
        for l:=0 to 9 do
          for m:=0 to 9 do
            for n:=0 to 9 do a[i,j,k,l,m,n]:=0;

  assign(f,'in.txt');
  reset(f);
  while not eof(f) do         // считываем числа из файла
    BEGIN
      read(f,x);
      { Получаем упорядоченную последовательность цифр числа }
      for i:=0 to 9 do bb[i]:=0;   // готовим временный массив
      // цифры числа заносим во временный массив по правилу: увеличиваем на 1
      // элемент массива, индекс которого соответствует цифре числа
      for i:=1 to 6 do             
      begin
        j:=x mod 10;
        inc(bb[j]);
        x:=(x-j) div 10;
      end;
      // теперь временный массив содержит информацию о том, сколько раз
      // в считанном числе содержится каждая из возможных цифр
      k:=1;
      for i:=0 to 9 do        // записываем в массив b цифры, содержащиеся в
        for j:=1 to bb[i] do  // записи числа - они записываются по возрастанию
          begin
            b[k]:=i;
            k:=k+1;
          end;

    { Получаем упорядоченную последовательность цифр числа. Сортировка нужна для
      того, чтобы учесть тот факт, что один и тот же набор цифр может давать
      разные числа: например, набор 1,1,1,2,2,3 дает числа 113221, 312121, и т.д.
      Приведенный ниже код работает несколько медленнее, чем вышеприведенный. }
    { for i:=1 to 6 do        // получаем цифры числа
        begin
          b[i]:=x mod 10;
          x:=(x-b[i]) div 10;
        end;
      for i:=1 to 6 do        // сортируем по убыванию
        for j:=i to 6 do
          if b[i]<b[j] then
            begin
              k:=b[i];
              b[i]:=b[j];
              b[j]:=k;
            end;  }
      inc(a[b[1],b[2],b[3],b[4],b[5],b[6]]);  // учитываем найденную комбинацию
    END;
  close(f);

  // находим максимальный элемент в массиве a
  x:=a[0,0,0,0,0,0];
  for i:=0 to 9 do
    for j:=0 to 9 do
      for k:=0 to 9 do
        for l:=0 to 9 do
          for m:=0 to 9 do
            for n:=0 to 9 do
              if a[i,j,k,l,m,n]>x then x:= a[i,j,k,l,m,n];

  assign(f,'out.txt');
  rewrite(f);
  writeln(f,x);
  // записываем комбинацию наиболее часто встречающихся цифр
  for i:=0 to 9 do
    for j:=0 to 9 do
      for k:=0 to 9 do
        for l:=0 to 9 do
          for m:=0 to 9 do
            for n:=0 to 9 do
              if a[i,j,k,l,m,n]=x then writeln(f,i,' ',j,' ',k,' ',l,' ',m,' ',n);
  close(f);

  t2:=Now;
  writeln('Time ',MilliSecondsBetween(t2,t1)/1000:5:3,' s.');
  write('Program is complete');
  readln;
end.
 